# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Page {
  id: ID!
  createdAt: DateTime
  status: String
  title: String
  summary: String
  content: Page_content_Document
  coverImage: CloudinaryImage_File
  imageGallery(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  imageGalleryCount(where: ImageWhereInput! = {}): Int
}

type Page_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input PageWhereUniqueInput {
  id: ID
  summary: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  status: StringNullableFilter
  title: StringFilter
  summary: StringFilter
  imageGallery: ImageManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input PageOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  title: OrderDirection
  summary: OrderDirection
}

input PageUpdateInput {
  createdAt: DateTime
  status: String
  title: String
  summary: String
  content: JSON
  coverImage: Upload
  imageGallery: ImageRelateToManyForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  createdAt: DateTime
  status: String
  title: String
  summary: String
  content: JSON
  coverImage: Upload
  imageGallery: ImageRelateToManyForCreateInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Hero {
  id: ID!
  createdAt: DateTime
  title: String
  subtitle: String
  image: CloudinaryImage_File
}

input HeroWhereUniqueInput {
  id: ID
}

input HeroWhereInput {
  AND: [HeroWhereInput!]
  OR: [HeroWhereInput!]
  NOT: [HeroWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  title: StringFilter
  subtitle: StringFilter
}

input HeroOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
}

input HeroUpdateInput {
  createdAt: DateTime
  title: String
  subtitle: String
  image: Upload
}

input HeroUpdateArgs {
  where: HeroWhereUniqueInput!
  data: HeroUpdateInput!
}

input HeroCreateInput {
  createdAt: DateTime
  title: String
  subtitle: String
  image: Upload
}

type Homepage {
  id: ID!
  hero: Hero
  size: HomepageSizeType
  notification: Notification
  categories(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  categoriesCount(where: PageWhereInput! = {}): Int
}

enum HomepageSizeType {
  small
  medium
  large
}

input HomepageWhereUniqueInput {
  id: ID
}

input HomepageWhereInput {
  AND: [HomepageWhereInput!]
  OR: [HomepageWhereInput!]
  NOT: [HomepageWhereInput!]
  id: IDFilter
  hero: HeroWhereInput
  size: HomepageSizeTypeNullableFilter
  notification: NotificationWhereInput
  categories: PageManyRelationFilter
}

input HomepageSizeTypeNullableFilter {
  equals: HomepageSizeType
  in: [HomepageSizeType!]
  notIn: [HomepageSizeType!]
  not: HomepageSizeTypeNullableFilter
}

input PageManyRelationFilter {
  every: PageWhereInput
  some: PageWhereInput
  none: PageWhereInput
}

input HomepageOrderByInput {
  id: OrderDirection
  size: OrderDirection
}

input HomepageUpdateInput {
  hero: HeroRelateToOneForUpdateInput
  size: HomepageSizeType
  notification: NotificationRelateToOneForUpdateInput
  categories: PageRelateToManyForUpdateInput
}

input HeroRelateToOneForUpdateInput {
  create: HeroCreateInput
  connect: HeroWhereUniqueInput
  disconnect: Boolean
}

input NotificationRelateToOneForUpdateInput {
  create: NotificationCreateInput
  connect: NotificationWhereUniqueInput
  disconnect: Boolean
}

input PageRelateToManyForUpdateInput {
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

input HomepageUpdateArgs {
  where: HomepageWhereUniqueInput! = {id: 1}
  data: HomepageUpdateInput!
}

input HomepageCreateInput {
  hero: HeroRelateToOneForCreateInput
  size: HomepageSizeType
  notification: NotificationRelateToOneForCreateInput
  categories: PageRelateToManyForCreateInput
}

input HeroRelateToOneForCreateInput {
  create: HeroCreateInput
  connect: HeroWhereUniqueInput
}

input NotificationRelateToOneForCreateInput {
  create: NotificationCreateInput
  connect: NotificationWhereUniqueInput
}

input PageRelateToManyForCreateInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}

type Notification {
  id: ID!
  createdAt: DateTime
  text: String
  buttonText: String
  buttonLink: String
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  text: StringFilter
  buttonText: StringFilter
  buttonLink: StringFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  text: OrderDirection
  buttonText: OrderDirection
  buttonLink: OrderDirection
}

input NotificationUpdateInput {
  createdAt: DateTime
  text: String
  buttonText: String
  buttonLink: String
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  createdAt: DateTime
  text: String
  buttonText: String
  buttonLink: String
}

type Image {
  id: ID!
  createdAt: DateTime
  title: String
  description: String
  image: CloudinaryImage_File
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  title: StringFilter
  description: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input ImageUpdateInput {
  createdAt: DateTime
  title: String
  description: String
  image: Upload
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  createdAt: DateTime
  title: String
  description: String
  image: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createHero(data: HeroCreateInput!): Hero
  createHeroes(data: [HeroCreateInput!]!): [Hero]
  updateHero(where: HeroWhereUniqueInput!, data: HeroUpdateInput!): Hero
  updateHeroes(data: [HeroUpdateArgs!]!): [Hero]
  deleteHero(where: HeroWhereUniqueInput!): Hero
  deleteHeroes(where: [HeroWhereUniqueInput!]!): [Hero]
  createHomepage(data: HomepageCreateInput!): Homepage
  createHomepages(data: [HomepageCreateInput!]!): [Homepage]
  updateHomepage(where: HomepageWhereUniqueInput! = {id: 1}, data: HomepageUpdateInput!): Homepage
  updateHomepages(data: [HomepageUpdateArgs!]!): [Homepage]
  deleteHomepage(where: HomepageWhereUniqueInput! = {id: 1}): Homepage
  deleteHomepages(where: [HomepageWhereUniqueInput!]!): [Homepage]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  heroes(where: HeroWhereInput! = {}, orderBy: [HeroOrderByInput!]! = [], take: Int, skip: Int! = 0): [Hero!]
  hero(where: HeroWhereUniqueInput!): Hero
  heroesCount(where: HeroWhereInput! = {}): Int
  homepages(where: HomepageWhereInput! = {id: {equals: 1}}, orderBy: [HomepageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Homepage!]
  homepage(where: HomepageWhereUniqueInput! = {id: 1}): Homepage
  homepagesCount(where: HomepageWhereInput! = {id: {equals: 1}}): Int
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
